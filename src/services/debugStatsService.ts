import { GlobalPlaybackService } from './globalPlaybackService';
import { RepetitionService } from './repetitionService';
import ReproductionStatsService from './reproductionStatsService';

export class DebugStatsService {
  private static instance: DebugStatsService;
  private globalPlayback: GlobalPlaybackService;
  private repetitionService: RepetitionService;
  private reproductionStatsService: ReproductionStatsService;

  constructor() {
    this.globalPlayback = GlobalPlaybackService.getInstance();
    this.repetitionService = RepetitionService.getInstance();
    this.reproductionStatsService = ReproductionStatsService.getInstance();
  }

  static getInstance(): DebugStatsService {
    if (!DebugStatsService.instance) {
      DebugStatsService.instance = new DebugStatsService();
    }
    return DebugStatsService.instance;
  }

  // Mostrar estad√≠sticas completas del sistema
  showStats(): void {
    console.log('=== üìä ESTAD√çSTICAS DEL SISTEMA ===');
    
    // Estado del servicio global
    const globalStatus = this.globalPlayback.getStatus();
    console.log('\nüé¨ Servicio Global de Reproducci√≥n:');
    console.log('- Estado:', globalStatus.isRunning ? 'üü¢ Activo' : 'üî¥ Detenido');
    console.log('- Programas activos:', globalStatus.activePrograms);
    console.log('- Zonas activas:', globalStatus.activeZones);
    console.log('- Total contenido:', globalStatus.totalContent);
    console.log('- Velocidad reproducci√≥n:', globalStatus.playbackSpeed + 'ms');
    
    // Estado de reproducci√≥n actual
    console.log('\nüéØ Estado de Reproducci√≥n Actual:');
    const playbackStats = this.globalPlayback.getCurrentPlaybackStats();
    Object.entries(playbackStats).forEach(([, programData]) => {
      console.log(`üìã Programa: ${programData.programName}`);
      Object.entries(programData.zones).forEach(([, zoneData]) => {
        console.log(`  üìç Zona: ${zoneData.zoneName}`);
        console.log(`    - Contenido actual: ${zoneData.currentContent}`);
        console.log(`    - Total contenido: ${zoneData.totalContent}`);
        console.log(`    - Contenido disponible: ${zoneData.availableContent}`);
      });
    });

    // Estad√≠sticas de repetici√≥n
    console.log('\nüîÑ Estad√≠sticas de Repetici√≥n:');
    const repetitionStats = this.repetitionService.getAllStats();
    if (repetitionStats.length > 0) {
      repetitionStats.forEach(stat => {
        console.log(`üìÑ ${stat.contentId}:`);
        console.log(`  - Reproducciones hoy: ${stat.reproductionsToday}`);
        console.log(`  - L√≠mite diario: ${stat.dailyLimit === -1 ? 'Ilimitado' : stat.dailyLimit}`);
        console.log(`  - Puede reproducir: ${stat.canPlayToday ? '‚úÖ' : '‚ùå'}`);
      });
    } else {
      console.log('No hay datos de repetici√≥n disponibles');
    }

    // Estad√≠sticas de reproducci√≥n
    console.log('\nüìà Estad√≠sticas de Reproducci√≥n:');
    const reproductionStats = this.reproductionStatsService.getAllStats();
    if (reproductionStats.length > 0) {
      reproductionStats.forEach(stat => {
        console.log(`üìÑ ${stat.contentName}:`);
        console.log(`  - ID: ${stat.contentId}`);
        console.log(`  - Tipo: ${stat.contentType}`);
        console.log(`  - Reproducciones: ${stat.reproductions}`);
        console.log(`  - √öltima reproducci√≥n: ${stat.lastReproduction}`);
        console.log(`  - Tiempo total: ${stat.totalTime}s`);
      });
    } else {
      console.log('No hay datos de reproducci√≥n disponibles');
    }
  }

  // Mostrar estado resumido del sistema
  systemStatus(): void {
    const globalStatus = this.globalPlayback.getStatus();
    const repetitionStats = this.repetitionService.getAllStats();
    const reproductionStats = this.reproductionStatsService.getAllStats();

    console.log('=== üîç ESTADO R√ÅPIDO DEL SISTEMA ===');
    console.log(`üé¨ Servicio Global: ${globalStatus.isRunning ? 'üü¢ Activo' : 'üî¥ Detenido'}`);
    console.log(`üìã Programas: ${globalStatus.activePrograms}`);
    console.log(`üìç Zonas: ${globalStatus.activeZones}`);
    console.log(`üìÑ Contenido: ${globalStatus.totalContent}`);
    console.log(`üîÑ Registros repetici√≥n: ${repetitionStats.length}`);
    console.log(`üìà Registros reproducci√≥n: ${reproductionStats.length}`);
    console.log(`‚è±Ô∏è Velocidad: ${globalStatus.playbackSpeed}ms`);
  }

  // Simular una reproducci√≥n para testing
  simulatePlayback(): void {
    console.log('üß™ Simulando reproducci√≥n de prueba...');
    
    // Obtener el primer contenido disponible
    const playbackStats = this.globalPlayback.getCurrentPlaybackStats();
    const firstProgram = Object.values(playbackStats)[0];
    
    if (firstProgram) {
      const firstZone = Object.values(firstProgram.zones)[0];
      if (firstZone) {
        console.log(`üìÑ Simulando reproducci√≥n de: ${firstZone.currentContent}`);
        console.log('‚úÖ Reproducci√≥n simulada completada');
      } else {
        console.log('‚ùå No hay zonas disponibles para simular');
      }
    } else {
      console.log('‚ùå No hay programas disponibles para simular');
    }
  }

  // Monitorear cambios en tiempo real
  startMonitoring(): void {
    console.log('üîç Iniciando monitoreo en tiempo real...');
    console.log('üìä Mostrando estad√≠sticas cada 10 segundos');
    
    const interval = setInterval(() => {
      console.log('\n‚è∞ Actualizaci√≥n autom√°tica:');
      this.systemStatus();
    }, 10000);

    // Guardar referencia para poder detener el monitoreo
    (window as any).stopMonitoring = () => {
      clearInterval(interval);
      console.log('‚èπÔ∏è Monitoreo detenido');
    };
    
    console.log('üí° Para detener el monitoreo, ejecuta: stopMonitoring()');
  }

  // Limpiar todas las estad√≠sticas
  clearAllStats(): void {
    console.log('üßπ Limpiando todas las estad√≠sticas...');
    
    // Limpiar estad√≠sticas de repetici√≥n
    const repetitionStats = this.repetitionService.getAllStats();
    repetitionStats.forEach(stat => {
      this.repetitionService.clearContentData(stat.contentId);
    });
    
    // Limpiar estad√≠sticas de reproducci√≥n
    this.reproductionStatsService.clearAllStats();
    
    console.log('‚úÖ Todas las estad√≠sticas han sido limpiadas');
  }

  // Cambiar velocidad de reproducci√≥n
  setPlaybackSpeed(seconds: number): void {
    const milliseconds = seconds * 1000;
    this.globalPlayback.setPlaybackSpeed(milliseconds);
    console.log(`‚ö° Velocidad de reproducci√≥n cambiada a ${seconds} segundos`);
  }

  // Forzar avance de contenido
  forceAdvance(programId: string, zoneId: string): void {
    this.globalPlayback.forceAdvanceContent(programId, zoneId);
    console.log(`‚è≠Ô∏è Contenido avanzado manualmente en programa ${programId}, zona ${zoneId}`);
  }

  // Mostrar comandos disponibles
  showCommands(): void {
    console.log('=== üõ†Ô∏è COMANDOS DISPONIBLES ===');
    console.log('debugStats.showStats()         - Mostrar estad√≠sticas completas');
    console.log('debugStats.systemStatus()      - Estado r√°pido del sistema');
    console.log('debugStats.simulatePlayback()  - Simular reproducci√≥n');
    console.log('debugStats.startMonitoring()   - Monitorear en tiempo real');
    console.log('debugStats.clearAllStats()     - Limpiar todas las estad√≠sticas');
    console.log('debugStats.setPlaybackSpeed(5) - Cambiar velocidad (segundos)');
    console.log('debugStats.showCommands()      - Mostrar estos comandos');
    console.log('\nüé¨ Servicio Global:');
    console.log('globalPlayback.getStatus()     - Estado del servicio global');
    console.log('globalPlayback.getCurrentPlaybackStats() - Estad√≠sticas actuales');
  }
}

// Hacer disponible globalmente
declare global {
  interface Window {
    debugStats: DebugStatsService;
  }
}

// Crear instancia global
const debugStatsService = DebugStatsService.getInstance();
window.debugStats = debugStatsService;

// Mostrar comandos al cargar
console.log('üõ†Ô∏è Servicio de Debug cargado. Ejecuta debugStats.showCommands() para ver comandos disponibles');

export default debugStatsService; 